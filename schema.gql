# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type SecurityGroup {
  id: ID!
  groupName: String!
  description: String
  premissons: [String!]!
}

type User {
  id: String!
  firstName: String!
  lastName: String!
  fullName: String!
  slag: String!
  VerifiedPhone: String!
  bio: String
  gender: GenderEnum!
  country: String!
  profilePicture: String
  favLang: langEnum!
  securityGroup: SecurityGroup
  notVerifiedEmail: String!
  VerifiedEmail: String!
  isBlocked: Boolean!
  getTweets: JSON
}

enum GenderEnum {
  MALE
  FEMALE
}

enum langEnum {
  AR
  EN
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type PageInfo {
  page: Int
  limit: Int!
  hasNext: Boolean!
  hasBefore: Boolean!
}

type GqlStringResponse {
  data: String
  message: String!
  code: Int!
  success: Boolean!
}

type GqlBooleanResponse {
  data: Boolean
  message: String!
  code: Int!
  success: Boolean!
}

type GqlUserResponse {
  data: User
  message: String!
  code: Int!
  success: Boolean!
}

type GqlUsersPagination {
  items: [User]
  pageInfo: PageInfo!
}

type GqlUsersResponse {
  data: GqlUsersPagination
  message: String!
  code: Int!
  success: Boolean!
}

type Tweet {
  tweet: String!
  parentReply: String
  retweet: String
  replies: [String!]!
  Tweet_Images: [String!]!
}

type GqlTweetResponse {
  data: Tweet
  message: String!
  code: Int!
  success: Boolean!
}

type GqlTweetsPagination {
  items: [Tweet]
  pageInfo: PageInfo!
}

type GqlTweetsResponse {
  data: GqlTweetsPagination
  message: String!
  code: Int!
  success: Boolean!
}

type GqlSecurityGroupResponse {
  data: SecurityGroup
  message: String!
  code: Int!
  success: Boolean!
}

scalar Timestamp

type Query {
  getMe: GqlUserResponse!
  getUsers(page: Float!, limit: Float!): GqlUsersResponse!
  tweet(id: Int!): Tweet!
  getAllTweets(page: Float!, limit: Float!): GqlTweetsResponse!
}

type Mutation {
  register(input: RegisterInput!): JSON!
  validateOtp(input: UserValideOtp!): GqlBooleanResponse!
  signInUsingEmail(input: UserSignIn!): GqlStringResponse!
  validatePhoneNumber(phone: String!): GqlStringResponse!
  addFollow(targetUserId: String!): GqlBooleanResponse!
  createTweet(createTweetInput: CreateTweetInput!): GqlTweetResponse!
  Retweet(tweetId: String!, createTweetInput: CreateTweetInput!): GqlTweetResponse!
  Reply(tweetId: String!, input: CreateTweetInput!): GqlTweetResponse!
  updateTweet(updateTweetInput: UpdateTweetInput!): Tweet!
  removeTweet(id: Int!): Tweet!
  createSecuritygroup(input: CreateSecurityGroupInput!): GqlSecurityGroupResponse!
  assignSecurityGroupToUser(input: AssignSecurityGroupToUsers!): GqlBooleanResponse!
  unAssignSecurityGroupToUser(input: UnAssignSecurityGroupToUsersInput!): GqlBooleanResponse!
  deleteSecurityGroupToUser(securityGroupId: String!): GqlBooleanResponse!
  updateSecurityGroupToUser(input: UpdateSecurityGroupInput!): GqlSecurityGroupResponse!
}

input RegisterInput {
  firstName: String!
  lastName: String!
  birthDate: Timestamp!
  bio: String
  email: String
  phone: String!
  password: String!
  country: String!
}

input UserValideOtp {
  phone: String
  email: String
  otp: String!
}

input UserSignIn {
  phone: String
  email: String
  password: String!
}

input CreateTweetInput {
  tweet: String!
  hashtag: [String!]
}

input UpdateTweetInput {
  tweet: String
  hashtag: [String!]
  id: Int!
}

input CreateSecurityGroupInput {
  groupName: String!
  description: String
  premissons: [String!]!
}

input AssignSecurityGroupToUsers {
  securityGroupId: String!
  usersIds: [String!]!
}

input UnAssignSecurityGroupToUsersInput {
  usersIds: [String!]!
}

input UpdateSecurityGroupInput {
  securityGroupId: String!
  groupName: String
  description: String
  permissions: [String]
}